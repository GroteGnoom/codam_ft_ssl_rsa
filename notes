https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test
deterministic test:

if n < 18,446,744,073,709,551,616 = 2^64, it is enough to test a = 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, and 37.

is that not fast enough?

or is it not allowed to assume the generalized Riemann hypothesis?

no, must be correct for all those numbers

interesting info on expected number of tests to find a prime
https://imada.sdu.dk/u/joan/projects/RSA.pdf

Usually you'd just use bigger numbers than 64-bits.


-o is probably the filename to output to
-i is the input fule in ft_ssl_des. But that's weird here, right? Because you don't have any input?

openssl genrsa --verbose looks a little bit more like the expected output:

openssl genrsa --verbose --numbits 512
Generating RSA key with 512 bits
..++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
..................++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
e is 65537 (0x010001)
-----BEGIN PRIVATE KEY-----
MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEA0pXtZMHftquAjxIt
+7B9ek29H3M7UltnQH3FAk0vMVgqvuwKmvjHZM5yR1YMppJCsq4E0/0tXo7M8WmL
ooNKdwIDAQABAkBv5PhSDG4ZuwFBhFBopzvVK89tEaaYuTag3vM6qNaFqbLvd9eH
WvsVZykEZSQN3SGg61Nzy52JX1d6Jr9/MR85AiEA+1SLr7pm7x2SDcmXqPv7ARgH
feAxqKgoL8XJ5P75bRUCIQDWf5Rjf8EpuOjn/1dr4qEy/TCZf8nVHZRbGWPuI7x0
WwIgU8U2WfgzXvfoOpg66KQ0YYT02kvjwWdrHaE7Tgx+bpECIQDFFUQKh/+7jiKx
x3NTtU/Xwbs9zqRsJFmDuriOvlcRsQIhAPNCIKst1GZfPOi5LMv4hRRoCPRBWoid
jHQbmNn/y7X7
-----END PRIVATE KEY-----

kid-RSA to help understand it?
https://macs4200.org/chapters/11/1/kidrsa.html

for a modulus of 64 bits we only need to be able to generate primes of 32 bits? it seems like V 0.1 lets you do too much work.

In the original RSA paper,[1] the Euler totient function φ(n) = (p − 1)(q − 1) is used instead of λ(n) for calculating the private exponent d. Since φ(n) is always divisible by λ(n), the algorithm works as well. The possibility of using Euler totient function results also from Lagrange's theorem applied to the multiplicative group of integers modulo pq. Thus any d satisfying d⋅e ≡ 1 (mod φ(n)) also satisfies d⋅e ≡ 1 (mod λ(n)). However, computing d modulo φ(n) will sometimes yield a result that is larger than necessary (i.e. d > λ(n)).

https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n

https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation

<<<<<<< HEAD
https://brilliant.org/wiki/rsa-encryption/
=======
so in the man page it says
       -traditional
           Write the key using the traditional PKCS#1 format instead of the
           PKCS#8 format.

so the default is PKCS#8 :D
https://datatracker.ietf.org/doc/html/rfc5208
https://www.itu.int/rec/T-REC-X.690

but this says that 
https://stackoverflow.com/questions/55675963/converting-a-string-private-key-to-privatekey-type
BEGIN RSA PRIVATE KEY means your key is pkcs#1 format and not pkcs#8

aha! else it says BEGIN PRIVATE KEY

so if I want to do what the subject says, I need PKCS#1

address sanitizer does give me linenumbers with gcc, but not with clang

DER is like BER, but ber is general (so either CER or DER), CER does not use lengths, DER does explicitly put in the lengths

for PKCS #1:
https://www.rfc-editor.org/rfc/pdfrfc/rfc8017.txt.pdf

PKCS #8 is very short?
https://www.rfc-editor.org/rfc/pdfrfc/rfc5208.txt.pdf

some nice explanations:
https://stackoverflow.com/questions/48958304/pkcs1-and-pkcs8-format-for-rsa-private-key

from pkcs:
A recommended syntax for interchanging RSA private keys between
implementations, which includes components from both representations,
is given in Appendix A.1.2; an implementation’s internal
representation may differ.
Oh come on! It's so weird: here's the way to do it, but actually in practice do this other thing.
An RSA private key should be represented with the ASN.1 type
RSAPrivateKey:
RSAPrivateKey ::= SEQUENCE {
version Version,
modulus INTEGER, -- n
publicExponent INTEGER, -- e
privateExponent INTEGER, -- d
prime1 INTEGER, -- p
prime2 INTEGER, -- q
exponent1 INTEGER, -- d mod (p-1)
exponent2 INTEGER, -- d mod (q-1)
coefficient INTEGER, -- (inverse of q) mod p
otherPrimeInfos OtherPrimeInfos OPTIONAL
}

version is the version number, for compatibility with future
revisions of this document. It SHALL be 0 for this version of the
document, unless multi-prime is used; in which case, it SHALL be
1.
Version ::= INTEGER { two-prime(0), multi(1) }
(CONSTRAINED BY
{-- version must be multi if otherPrimeInfos present --})

so the version is just the INTEGER 0

I can't find the INTEGER tag number in the X.690, but everybody says it's 2:
https://stackoverflow.com/questions/55357924/asn-1-der-encoding-of-integers
https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/
https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/#tag
, maybe it's in x.680 or something. Yes
X.6801, 8.6 page 26
UNIVERSAL 2 Integer type

